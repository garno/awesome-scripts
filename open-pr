#!/bin/sh

# Retrieve branch name
branch=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')

# Retrieve destination branch
if [[ $1 ]]; then
    destination_branch=$1

    # Parse previous branch if “-” is specified as destination branch
    if [[ $destination_branch == '-' ]]; then
      destination_branch=$(git rev-parse --symbolic-full-name @{-1})
      destination_branch=${destination_branch#*refs/heads/}
    fi;
else
    # Try to extract the destination from the current branch
    destination_branch=${branch%--*}

    # Fall back to the default origin branch
    if [[ $branch == $destination_branch ]]; then
      master_exists=$(git branch | grep 'master')

      if [[ -z $master_exists ]]; then
        destination_branch=develop
      else
        destination_branch=master
      fi
    fi
fi;

# Determine the default origin branch
if [[ $branch == $destination_branch ]]; then
  master_exists=$(git branch | grep 'master')

  if [[ -z $master_exists ]]; then
    destination_branch=develop
  else
    destination_branch=master
  fi
fi

# Retrieve repository URL
repository_url=$(git remote get-url origin | sed -e 's/git@//' -e 's/\.git//' -e 's/:/\//')

if [[ $repository_url == github* ]]; then
  pr_url=https://$repository_url/compare/$destination_branch...$branch
elif [[ $repository_url == gitlab* ]]; then
  pr_url="https://$repository_url/merge_requests/new?merge_request%5Bsource_branch%5D=$branch&merge_request%5Btarget_branch%5D=$destination_branch"
fi

# Open the new Pull Request URL
open $pr_url
